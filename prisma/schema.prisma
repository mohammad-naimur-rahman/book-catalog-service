// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String          @id @default(uuid())
  name       String
  email      String          @unique
  password   String
  role       USER_ROLE_ENUM? @default(customer)
  contactNo  String
  address    String
  profileImg String?
  reviewAndRatings ReviewAndRating[]
  orders Order[]

  @@map("users")
}

model Category {
  id    String @id @default(uuid())
  title String @unique
  books Book[]

  @@map("categories")
}

model Book {
  id              String   @id @default(uuid())
  title           String
  author          String
  price           Float
  genre           String
  publicationDate DateTime
  categoryId      String
  category        Category @relation(fields: [categoryId], references: [id])
  reviewAndRatings ReviewAndRating[]
  orderedBooks OrderedBook[]

  @@map("books")
}

model ReviewAndRating {
  id     String @id @default(uuid())
  review String
  rating Int
  userId String
  bookId String
  user   User   @relation(fields: [userId], references: [id])
  book   Book   @relation(fields: [bookId], references: [id])

  @@map("reviewAndRatings")
}


model OrderedBook {
  id       String   @id @default(uuid())
  bookId   String
  orderId String
  quantity Int
  book     Book     @relation(fields: [bookId], references: [id])
  order     Order     @relation(fields: [orderId], references: [id])

  @@map("orderedBooks")
}

model Order {
  id        String        @id @default(uuid())
  userId    String
  status    ORDER_STATUS_ENUM @default(pending)
  createdAt DateTime @default(now())
  user      User          @relation(fields: [userId], references: [id])
  orderedBooks OrderedBook[]

  @@map("orders")
}

enum USER_ROLE_ENUM {
  admin
  customer
}

enum ORDER_STATUS_ENUM {
  pending
  shipped
  delivered
}
